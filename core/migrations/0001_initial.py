# Generated by Django 5.2.7 on 2025-10-05 05:00
# Migration inicial que crea TODAS las tablas necesarias

from django.db import migrations, connection
from django.db.migrations.operations.base import Operation


class RunSQL(Operation):
    """Operación personalizada para ejecutar SQL directo"""

    def __init__(self, sql):
        self.sql = sql

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        schema_editor.execute(self.sql)

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        # No necesitamos rollback para desarrollo
        pass

    def describe(self):
        return f"Run SQL: {self.sql[:50]}..."


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        # Crear todas las tablas necesarias usando SQL directo
        RunSQL("""
        -- Crear todas las tablas faltantes
        CREATE TABLE IF NOT EXISTS core_userprofile (
            id BIGINT PRIMARY KEY,
            user_id INTEGER UNIQUE NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
            legajo VARCHAR(20),
            area VARCHAR(20),
            turno_habitual VARCHAR(1),
            telefono VARCHAR(20),
            fecha_ingreso DATE,
            activo BOOLEAN DEFAULT true,
            foto_perfil VARCHAR(100)
        );

        CREATE TABLE IF NOT EXISTS core_rol (
            id BIGINT PRIMARY KEY,
            nombre VARCHAR(50) UNIQUE NOT NULL,
            descripcion TEXT,
            permisos JSONB DEFAULT '{}',
            activo BOOLEAN DEFAULT true
        );

        CREATE TABLE IF NOT EXISTS core_usuariorol (
            id BIGINT PRIMARY KEY,
            usuario_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
            rol_id BIGINT NOT NULL REFERENCES core_rol(id) ON DELETE CASCADE,
            fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            asignado_por_id INTEGER REFERENCES auth_user(id) ON DELETE SET NULL,
            UNIQUE(usuario_id, rol_id)
        );

        CREATE TABLE IF NOT EXISTS core_ubicacion (
            id BIGINT PRIMARY KEY,
            codigo VARCHAR(20) UNIQUE NOT NULL,
            nombre VARCHAR(100) NOT NULL,
            tipo VARCHAR(20) NOT NULL,
            descripcion TEXT,
            activa BOOLEAN DEFAULT true
        );

        CREATE TABLE IF NOT EXISTS core_maquina (
            id BIGINT PRIMARY KEY,
            codigo VARCHAR(20) UNIQUE NOT NULL,
            nombre VARCHAR(100) NOT NULL,
            tipo VARCHAR(20) NOT NULL,
            fabricante VARCHAR(100),
            modelo VARCHAR(100),
            numero_serie VARCHAR(100),
            ano_fabricacion INTEGER,
            ubicacion_id BIGINT REFERENCES core_ubicacion(id) ON DELETE PROTECT,
            descripcion TEXT,
            capacidad_nominal DECIMAL(10,2),
            unidad_capacidad VARCHAR(20),
            activa BOOLEAN DEFAULT true,
            requiere_calificacion BOOLEAN DEFAULT false,
            fecha_instalacion DATE,
            imagen VARCHAR(100),
            documentos JSONB DEFAULT '[]'
        );

        CREATE TABLE IF NOT EXISTS core_producto (
            id BIGINT PRIMARY KEY,
            codigo VARCHAR(20) UNIQUE NOT NULL,
            nombre VARCHAR(200) NOT NULL,
            forma_farmaceutica VARCHAR(20) NOT NULL,
            principio_activo VARCHAR(200) NOT NULL,
            concentracion VARCHAR(50) NOT NULL,
            unidad_medida VARCHAR(20) NOT NULL,
            lote_minimo INTEGER NOT NULL CHECK (lote_minimo >= 1),
            lote_optimo INTEGER NOT NULL CHECK (lote_optimo >= 1),
            tiempo_vida_util_meses INTEGER NOT NULL CHECK (tiempo_vida_util_meses >= 1),
            requiere_cadena_frio BOOLEAN DEFAULT false,
            registro_anmat VARCHAR(50),
            activo BOOLEAN DEFAULT true,
            imagen VARCHAR(100)
        );

        CREATE TABLE IF NOT EXISTS core_formula (
            id BIGINT PRIMARY KEY,
            producto_id BIGINT NOT NULL REFERENCES core_producto(id) ON DELETE CASCADE,
            version VARCHAR(20) NOT NULL,
            fecha_vigencia_desde DATE NOT NULL,
            fecha_vigencia_hasta DATE,
            rendimiento_teorico DECIMAL(5,2) NOT NULL CHECK (rendimiento_teorico >= 0 AND rendimiento_teorico <= 100),
            tiempo_estimado_horas DECIMAL(5,2) NOT NULL,
            aprobada_por_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            fecha_aprobacion DATE NOT NULL,
            observaciones TEXT,
            activa BOOLEAN DEFAULT true,
            UNIQUE(producto_id, version)
        );

        CREATE TABLE IF NOT EXISTS core_etapaproduccion (
            id BIGINT PRIMARY KEY,
            codigo VARCHAR(20) UNIQUE NOT NULL,
            nombre VARCHAR(100) NOT NULL,
            descripcion TEXT,
            orden_tipico INTEGER NOT NULL,
            requiere_registro_parametros BOOLEAN DEFAULT false,
            parametros_esperados JSONB DEFAULT '[]',
            activa BOOLEAN DEFAULT true
        );

        CREATE TABLE IF NOT EXISTS core_turno (
            id BIGINT PRIMARY KEY,
            codigo VARCHAR(1) UNIQUE NOT NULL,
            nombre VARCHAR(20) NOT NULL,
            hora_inicio TIME NOT NULL,
            hora_fin TIME NOT NULL,
            activo BOOLEAN DEFAULT true,
            CHECK (codigo IN ('M', 'T', 'N'))
        );

        CREATE TABLE IF NOT EXISTS core_lote (
            id BIGINT PRIMARY KEY,
            codigo_lote VARCHAR(50) UNIQUE NOT NULL,
            producto_id BIGINT NOT NULL REFERENCES core_producto(id) ON DELETE PROTECT,
            formula_id BIGINT NOT NULL REFERENCES core_formula(id) ON DELETE PROTECT,
            cantidad_planificada INTEGER NOT NULL CHECK (cantidad_planificada >= 1),
            cantidad_producida INTEGER DEFAULT 0,
            cantidad_rechazada INTEGER DEFAULT 0,
            unidad VARCHAR(20) NOT NULL,
            estado VARCHAR(20) DEFAULT 'PLANIFICADO',
            prioridad VARCHAR(10) DEFAULT 'NORMAL',
            fecha_planificada_inicio TIMESTAMP NOT NULL,
            fecha_real_inicio TIMESTAMP,
            fecha_planificada_fin TIMESTAMP NOT NULL,
            fecha_real_fin TIMESTAMP,
            turno_id BIGINT REFERENCES core_turno(id) ON DELETE PROTECT,
            supervisor_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            observaciones TEXT,
            creado_por_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            CHECK (estado IN ('PLANIFICADO', 'EN_PROCESO', 'PAUSADO', 'FINALIZADO', 'RECHAZADO', 'LIBERADO')),
            CHECK (prioridad IN ('BAJA', 'NORMAL', 'ALTA', 'URGENTE'))
        );

        CREATE TABLE IF NOT EXISTS core_loteetapa (
            id BIGINT PRIMARY KEY,
            lote_id BIGINT NOT NULL REFERENCES core_lote(id) ON DELETE CASCADE,
            etapa_id BIGINT NOT NULL REFERENCES core_etapaproduccion(id) ON DELETE PROTECT,
            orden INTEGER NOT NULL,
            maquina_id BIGINT REFERENCES core_maquina(id) ON DELETE PROTECT,
            estado VARCHAR(20) DEFAULT 'PENDIENTE',
            fecha_inicio TIMESTAMP,
            fecha_fin TIMESTAMP,
            duracion_minutos INTEGER,
            operario_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            cantidad_entrada DECIMAL(10,2),
            cantidad_salida DECIMAL(10,2),
            cantidad_merma DECIMAL(10,2) DEFAULT 0,
            porcentaje_rendimiento DECIMAL(5,2),
            parametros_registrados JSONB DEFAULT '[]',
            observaciones TEXT,
            requiere_aprobacion_calidad BOOLEAN DEFAULT false,
            aprobada_por_calidad_id INTEGER REFERENCES auth_user(id) ON DELETE SET NULL,
            fecha_aprobacion_calidad TIMESTAMP,
            CHECK (estado IN ('PENDIENTE', 'EN_PROCESO', 'PAUSADO', 'COMPLETADO', 'RECHAZADO')),
            UNIQUE(lote_id, orden)
        );

        CREATE TABLE IF NOT EXISTS core_parada (
            id BIGINT PRIMARY KEY,
            lote_etapa_id BIGINT NOT NULL REFERENCES core_loteetapa(id) ON DELETE CASCADE,
            tipo VARCHAR(20) NOT NULL,
            categoria VARCHAR(20) NOT NULL,
            fecha_inicio TIMESTAMP NOT NULL,
            fecha_fin TIMESTAMP,
            duracion_minutos INTEGER,
            descripcion TEXT NOT NULL,
            solucion TEXT,
            registrado_por_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            CHECK (tipo IN ('PLANIFICADA', 'NO_PLANIFICADA')),
            CHECK (categoria IN ('FALLA_EQUIPO', 'FALTA_INSUMO', 'CAMBIO_FORMATO', 'LIMPIEZA', 'CALIDAD', 'OTROS'))
        );

        CREATE TABLE IF NOT EXISTS core_controlcalidad (
            id BIGINT PRIMARY KEY,
            lote_etapa_id BIGINT NOT NULL REFERENCES core_loteetapa(id) ON DELETE CASCADE,
            tipo_control VARCHAR(100) NOT NULL,
            valor_medido DECIMAL(10,4) NOT NULL,
            unidad VARCHAR(20) NOT NULL,
            valor_minimo DECIMAL(10,4) NOT NULL,
            valor_maximo DECIMAL(10,4) NOT NULL,
            conforme BOOLEAN NOT NULL,
            fecha_control TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            controlado_por_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            observaciones TEXT
        );

        CREATE TABLE IF NOT EXISTS core_lotedocumento (
            id BIGINT PRIMARY KEY,
            lote_id BIGINT NOT NULL REFERENCES core_lote(id) ON DELETE CASCADE,
            tipo_documento_id BIGINT NOT NULL REFERENCES core_tipodocumento(id) ON DELETE PROTECT,
            nombre VARCHAR(200) NOT NULL,
            archivo_url VARCHAR(500) NOT NULL,
            hash_sha256 VARCHAR(64) NOT NULL,
            tamaño_bytes BIGINT NOT NULL,
            subido_por_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE PROTECT,
            fecha_subida TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Continuar con más tablas...
        CREATE TABLE IF NOT EXISTS core_tipodocumento (
            id BIGINT PRIMARY KEY,
            codigo VARCHAR(10) UNIQUE NOT NULL,
            nombre VARCHAR(100) NOT NULL,
            descripcion TEXT,
            activo BOOLEAN DEFAULT true
        );

        -- Crear índices básicos
        CREATE INDEX IF NOT EXISTS idx_userprofile_user ON core_userprofile(user_id);
        CREATE INDEX IF NOT EXISTS idx_usuariorol_usuario ON core_usuariorol(usuario_id);
        CREATE INDEX IF NOT EXISTS idx_usuariorol_rol ON core_usuariorol(rol_id);
        CREATE INDEX IF NOT EXISTS idx_maquina_ubicacion ON core_maquina(ubicacion_id);
        CREATE INDEX IF NOT EXISTS idx_producto_codigo ON core_producto(codigo);
        CREATE INDEX IF NOT EXISTS idx_lote_producto ON core_lote(producto_id);
        CREATE INDEX IF NOT EXISTS idx_lote_estado ON core_lote(estado);
        CREATE INDEX IF NOT EXISTS idx_loteetapa_lote ON core_loteetapa(lote_id);
        """),
    ]
